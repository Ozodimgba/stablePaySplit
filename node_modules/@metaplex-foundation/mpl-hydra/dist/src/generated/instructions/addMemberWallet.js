"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.addMemberWallet = exports.getAddMemberWalletInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const accounts_1 = require("../accounts");
const shared_1 = require("../shared");
function getAddMemberWalletInstructionDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['shares', (0, serializers_1.u64)()],
    ], { description: 'AddMemberWalletInstructionData' }), (value) => ({
        ...value,
        discriminator: [201, 9, 59, 128, 69, 117, 220, 235],
    }));
}
exports.getAddMemberWalletInstructionDataSerializer = getAddMemberWalletInstructionDataSerializer;
// Instruction.
function addMemberWallet(context, input) {
    const signers = [];
    const keys = [];
    // Program ID.
    const programId = context.programs.getPublicKey('mplHydra', 'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg');
    // Resolved inputs.
    const resolvedAccounts = {
        member: [input.member, false],
        fanout: [input.fanout, true],
    };
    const resolvingArgs = {};
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'authority', input.authority
        ? [input.authority, true]
        : [context.identity, true]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'membershipAccount', input.membershipAccount
        ? [input.membershipAccount, true]
        : [
            (0, accounts_1.findFanoutMembershipVoucherPda)(context, {
                fanout: (0, umi_1.publicKey)(input.fanout, false),
                member: (0, umi_1.publicKey)(input.member, false),
            }),
            true,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'systemProgram', input.systemProgram
        ? [input.systemProgram, false]
        : [
            context.programs.getPublicKey('splSystem', '11111111111111111111111111111111'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'rent', input.rent
        ? [input.rent, false]
        : [
            (0, umi_1.publicKey)('SysvarRent111111111111111111111111111111111'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'tokenProgram', input.tokenProgram
        ? [input.tokenProgram, false]
        : [
            context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'),
            false,
        ]);
    const resolvedArgs = { ...input, ...resolvingArgs };
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.authority, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.member, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.fanout, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.membershipAccount, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.systemProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.rent, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.tokenProgram, false);
    // Data.
    const data = getAddMemberWalletInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = (0, accounts_1.getFanoutMembershipVoucherSize)() + umi_1.ACCOUNT_HEADER_SIZE;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.addMemberWallet = addMemberWallet;
//# sourceMappingURL=addMemberWallet.js.map