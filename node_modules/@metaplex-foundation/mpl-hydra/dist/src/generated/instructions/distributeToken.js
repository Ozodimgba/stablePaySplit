"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.distributeToken = exports.getDistributeTokenInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getDistributeTokenInstructionDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['distributeForMint', (0, serializers_1.bool)()],
    ], { description: 'DistributeTokenInstructionData' }), (value) => ({
        ...value,
        discriminator: [126, 105, 46, 135, 28, 36, 117, 212],
    }));
}
exports.getDistributeTokenInstructionDataSerializer = getDistributeTokenInstructionDataSerializer;
// Instruction.
function distributeToken(context, input) {
    const signers = [];
    const keys = [];
    // Program ID.
    const programId = context.programs.getPublicKey('mplHydra', 'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg');
    // Resolved inputs.
    const resolvedAccounts = {
        member: [input.member, true],
        membershipMintTokenAccount: [
            input.membershipMintTokenAccount,
            true,
        ],
        membershipVoucher: [input.membershipVoucher, true],
        fanout: [input.fanout, true],
        holdingAccount: [input.holdingAccount, true],
        fanoutForMint: [input.fanoutForMint, true],
        fanoutForMintMembershipVoucher: [
            input.fanoutForMintMembershipVoucher,
            true,
        ],
        fanoutMint: [input.fanoutMint, false],
        fanoutMintMemberTokenAccount: [
            input.fanoutMintMemberTokenAccount,
            true,
        ],
        membershipMint: [input.membershipMint, true],
        memberStakeAccount: [input.memberStakeAccount, true],
    };
    const resolvingArgs = {};
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'payer', input.payer
        ? [input.payer, false]
        : [context.payer, false]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'systemProgram', input.systemProgram
        ? [input.systemProgram, false]
        : [
            context.programs.getPublicKey('splSystem', '11111111111111111111111111111111'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'rent', input.rent
        ? [input.rent, false]
        : [
            (0, umi_1.publicKey)('SysvarRent111111111111111111111111111111111'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'tokenProgram', input.tokenProgram
        ? [input.tokenProgram, false]
        : [
            context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'),
            false,
        ]);
    const resolvedArgs = { ...input, ...resolvingArgs };
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.payer, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.member, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.membershipMintTokenAccount, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.membershipVoucher, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.fanout, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.holdingAccount, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.fanoutForMint, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.fanoutForMintMembershipVoucher, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.fanoutMint, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.fanoutMintMemberTokenAccount, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.systemProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.rent, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.tokenProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.membershipMint, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.memberStakeAccount, false);
    // Data.
    const data = getDistributeTokenInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.distributeToken = distributeToken;
//# sourceMappingURL=distributeToken.js.map