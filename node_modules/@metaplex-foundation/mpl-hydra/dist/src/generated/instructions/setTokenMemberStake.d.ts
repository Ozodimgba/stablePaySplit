/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type SetTokenMemberStakeInstructionAccounts = {
    member: Signer;
    fanout: PublicKey | Pda;
    membershipVoucher: PublicKey | Pda;
    membershipMint: PublicKey | Pda;
    membershipMintTokenAccount: PublicKey | Pda;
    memberStakeAccount: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
};
export type SetTokenMemberStakeInstructionData = {
    discriminator: Array<number>;
    shares: bigint;
};
export type SetTokenMemberStakeInstructionDataArgs = {
    shares: number | bigint;
};
/** @deprecated Use `getSetTokenMemberStakeInstructionDataSerializer()` without any argument instead. */
export declare function getSetTokenMemberStakeInstructionDataSerializer(_context: object): Serializer<SetTokenMemberStakeInstructionDataArgs, SetTokenMemberStakeInstructionData>;
export declare function getSetTokenMemberStakeInstructionDataSerializer(): Serializer<SetTokenMemberStakeInstructionDataArgs, SetTokenMemberStakeInstructionData>;
export type SetTokenMemberStakeInstructionArgs = SetTokenMemberStakeInstructionDataArgs;
export declare function setTokenMemberStake(context: Pick<Context, 'programs'>, input: SetTokenMemberStakeInstructionAccounts & SetTokenMemberStakeInstructionArgs): TransactionBuilder;
