/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type DistributeWalletInstructionAccounts = {
    payer?: Signer;
    member: PublicKey | Pda;
    membershipVoucher: PublicKey | Pda;
    fanout: PublicKey | Pda;
    holdingAccount: PublicKey | Pda;
    fanoutForMint: PublicKey | Pda;
    fanoutForMintMembershipVoucher: PublicKey | Pda;
    fanoutMint: PublicKey | Pda;
    fanoutMintMemberTokenAccount: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
    rent?: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
};
export type DistributeWalletInstructionData = {
    discriminator: Array<number>;
    distributeForMint: boolean;
};
export type DistributeWalletInstructionDataArgs = {
    distributeForMint: boolean;
};
/** @deprecated Use `getDistributeWalletInstructionDataSerializer()` without any argument instead. */
export declare function getDistributeWalletInstructionDataSerializer(_context: object): Serializer<DistributeWalletInstructionDataArgs, DistributeWalletInstructionData>;
export declare function getDistributeWalletInstructionDataSerializer(): Serializer<DistributeWalletInstructionDataArgs, DistributeWalletInstructionData>;
export type DistributeWalletInstructionArgs = DistributeWalletInstructionDataArgs;
export declare function distributeWallet(context: Pick<Context, 'programs' | 'payer'>, input: DistributeWalletInstructionAccounts & DistributeWalletInstructionArgs): TransactionBuilder;
