/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type DistributeNftInstructionAccounts = {
    payer?: Signer;
    member: PublicKey | Pda;
    membershipMintTokenAccount: PublicKey | Pda;
    membershipKey: PublicKey | Pda;
    membershipVoucher: PublicKey | Pda;
    fanout: PublicKey | Pda;
    holdingAccount: PublicKey | Pda;
    fanoutForMint: PublicKey | Pda;
    fanoutForMintMembershipVoucher: PublicKey | Pda;
    fanoutMint: PublicKey | Pda;
    fanoutMintMemberTokenAccount: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
    rent?: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
};
export type DistributeNftInstructionData = {
    discriminator: Array<number>;
    distributeForMint: boolean;
};
export type DistributeNftInstructionDataArgs = {
    distributeForMint: boolean;
};
/** @deprecated Use `getDistributeNftInstructionDataSerializer()` without any argument instead. */
export declare function getDistributeNftInstructionDataSerializer(_context: object): Serializer<DistributeNftInstructionDataArgs, DistributeNftInstructionData>;
export declare function getDistributeNftInstructionDataSerializer(): Serializer<DistributeNftInstructionDataArgs, DistributeNftInstructionData>;
export type DistributeNftInstructionArgs = DistributeNftInstructionDataArgs;
export declare function distributeNft(context: Pick<Context, 'programs' | 'payer'>, input: DistributeNftInstructionAccounts & DistributeNftInstructionArgs): TransactionBuilder;
