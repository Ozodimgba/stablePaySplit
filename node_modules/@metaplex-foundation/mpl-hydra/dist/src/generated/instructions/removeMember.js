"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeMember = exports.getRemoveMemberInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getRemoveMemberInstructionDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })]], { description: 'RemoveMemberInstructionData' }), (value) => ({ ...value, discriminator: [9, 45, 36, 163, 245, 40, 150, 85] }));
}
exports.getRemoveMemberInstructionDataSerializer = getRemoveMemberInstructionDataSerializer;
// Instruction.
function removeMember(context, input) {
    const signers = [];
    const keys = [];
    // Program ID.
    const programId = context.programs.getPublicKey('mplHydra', 'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg');
    // Resolved inputs.
    const resolvedAccounts = {
        member: [input.member, false],
        fanout: [input.fanout, true],
        membershipAccount: [input.membershipAccount, true],
        destination: [input.destination, true],
    };
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'authority', input.authority
        ? [input.authority, true]
        : [context.identity, true]);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.authority, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.member, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.fanout, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.membershipAccount, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.destination, false);
    // Data.
    const data = getRemoveMemberInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.removeMember = removeMember;
//# sourceMappingURL=removeMember.js.map