/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type SetForTokenMemberStakeInstructionAccounts = {
    authority?: Signer;
    member: PublicKey | Pda;
    fanout: PublicKey | Pda;
    membershipVoucher: PublicKey | Pda;
    membershipMint: PublicKey | Pda;
    membershipMintTokenAccount: PublicKey | Pda;
    memberStakeAccount: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
};
export type SetForTokenMemberStakeInstructionData = {
    discriminator: Array<number>;
    shares: bigint;
};
export type SetForTokenMemberStakeInstructionDataArgs = {
    shares: number | bigint;
};
/** @deprecated Use `getSetForTokenMemberStakeInstructionDataSerializer()` without any argument instead. */
export declare function getSetForTokenMemberStakeInstructionDataSerializer(_context: object): Serializer<SetForTokenMemberStakeInstructionDataArgs, SetForTokenMemberStakeInstructionData>;
export declare function getSetForTokenMemberStakeInstructionDataSerializer(): Serializer<SetForTokenMemberStakeInstructionDataArgs, SetForTokenMemberStakeInstructionData>;
export type SetForTokenMemberStakeInstructionArgs = SetForTokenMemberStakeInstructionDataArgs;
export declare function setForTokenMemberStake(context: Pick<Context, 'programs' | 'identity'>, input: SetForTokenMemberStakeInstructionAccounts & SetForTokenMemberStakeInstructionArgs): TransactionBuilder;
