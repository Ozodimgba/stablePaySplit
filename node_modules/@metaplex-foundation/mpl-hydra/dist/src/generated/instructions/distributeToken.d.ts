/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type DistributeTokenInstructionAccounts = {
    payer?: Signer;
    member: PublicKey | Pda;
    membershipMintTokenAccount: PublicKey | Pda;
    membershipVoucher: PublicKey | Pda;
    fanout: PublicKey | Pda;
    holdingAccount: PublicKey | Pda;
    fanoutForMint: PublicKey | Pda;
    fanoutForMintMembershipVoucher: PublicKey | Pda;
    fanoutMint: PublicKey | Pda;
    fanoutMintMemberTokenAccount: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
    rent?: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
    membershipMint: PublicKey | Pda;
    memberStakeAccount: PublicKey | Pda;
};
export type DistributeTokenInstructionData = {
    discriminator: Array<number>;
    distributeForMint: boolean;
};
export type DistributeTokenInstructionDataArgs = {
    distributeForMint: boolean;
};
/** @deprecated Use `getDistributeTokenInstructionDataSerializer()` without any argument instead. */
export declare function getDistributeTokenInstructionDataSerializer(_context: object): Serializer<DistributeTokenInstructionDataArgs, DistributeTokenInstructionData>;
export declare function getDistributeTokenInstructionDataSerializer(): Serializer<DistributeTokenInstructionDataArgs, DistributeTokenInstructionData>;
export type DistributeTokenInstructionArgs = DistributeTokenInstructionDataArgs;
export declare function distributeToken(context: Pick<Context, 'programs' | 'payer'>, input: DistributeTokenInstructionAccounts & DistributeTokenInstructionArgs): TransactionBuilder;
