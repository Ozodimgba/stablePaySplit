/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type AddMemberNftInstructionAccounts = {
    authority?: Signer;
    fanout: PublicKey | Pda;
    membershipAccount: PublicKey | Pda;
    mint: PublicKey | Pda;
    metadata: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
    rent?: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
};
export type AddMemberNftInstructionData = {
    discriminator: Array<number>;
    shares: bigint;
};
export type AddMemberNftInstructionDataArgs = {
    shares: number | bigint;
};
/** @deprecated Use `getAddMemberNftInstructionDataSerializer()` without any argument instead. */
export declare function getAddMemberNftInstructionDataSerializer(_context: object): Serializer<AddMemberNftInstructionDataArgs, AddMemberNftInstructionData>;
export declare function getAddMemberNftInstructionDataSerializer(): Serializer<AddMemberNftInstructionDataArgs, AddMemberNftInstructionData>;
export type AddMemberNftInstructionArgs = AddMemberNftInstructionDataArgs;
export declare function addMemberNft(context: Pick<Context, 'programs' | 'identity'>, input: AddMemberNftInstructionAccounts & AddMemberNftInstructionArgs): TransactionBuilder;
