/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { PickPartial } from '../shared';
import { MembershipModel, MembershipModelArgs } from '../types';
export type InitInstructionAccounts = {
    authority?: Signer;
    fanout?: Pda;
    holdingAccount?: Pda;
    systemProgram?: PublicKey | Pda;
    membershipMint?: PublicKey | Pda;
    rent?: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
};
export type InitInstructionData = {
    discriminator: Array<number>;
    bumpSeed: number;
    nativeAccountBumpSeed: number;
    name: string;
    totalShares: bigint;
    model: MembershipModel;
};
export type InitInstructionDataArgs = {
    bumpSeed: number;
    nativeAccountBumpSeed: number;
    name: string;
    totalShares: number | bigint;
    model: MembershipModelArgs;
};
/** @deprecated Use `getInitInstructionDataSerializer()` without any argument instead. */
export declare function getInitInstructionDataSerializer(_context: object): Serializer<InitInstructionDataArgs, InitInstructionData>;
export declare function getInitInstructionDataSerializer(): Serializer<InitInstructionDataArgs, InitInstructionData>;
export type InitInstructionArgs = PickPartial<InitInstructionDataArgs, 'bumpSeed' | 'nativeAccountBumpSeed'>;
export declare function init(context: Pick<Context, 'programs' | 'eddsa' | 'identity'>, input: InitInstructionAccounts & InitInstructionArgs): TransactionBuilder;
