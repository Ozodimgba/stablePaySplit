/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Program, ProgramError } from '@metaplex-foundation/umi';
/** BadArtithmetic: Encountered an arithmetic error */
export declare class BadArtithmeticError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidAuthority: Invalid authority */
export declare class InvalidAuthorityError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InsufficientShares: Not Enough Available Shares */
export declare class InsufficientSharesError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** SharesArentAtMax: All available shares must be assigned to a member */
export declare class SharesArentAtMaxError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** NewMintAccountRequired: A New mint account must be provided */
export declare class NewMintAccountRequiredError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MintAccountRequired: A Token type Fanout requires a Membership Mint */
export declare class MintAccountRequiredError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidMembershipModel: Invalid Membership Model */
export declare class InvalidMembershipModelError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidMembershipVoucher: Invalid Membership Voucher */
export declare class InvalidMembershipVoucherError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MintDoesNotMatch: Invalid Mint for the config */
export declare class MintDoesNotMatchError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidHoldingAccount: Holding account does not match the config */
export declare class InvalidHoldingAccountError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** HoldingAccountMustBeAnATA: A Mint holding account must be an ata for the mint owned by the config */
export declare class HoldingAccountMustBeAnATAError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** DerivedKeyInvalid */
export declare class DerivedKeyInvalidError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** IncorrectOwner */
export declare class IncorrectOwnerError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** WalletDoesNotOwnMembershipToken: Wallet Does not Own Membership Token */
export declare class WalletDoesNotOwnMembershipTokenError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidMetadata: The Metadata specified is not valid Token Metadata */
export declare class InvalidMetadataError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** NumericalOverflow */
export declare class NumericalOverflowError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InsufficientBalanceToDistribute: Not enough new balance to distribute */
export declare class InsufficientBalanceToDistributeError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidFanoutForMint */
export declare class InvalidFanoutForMintError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MustDistribute: This operation must be the instruction right after a distrobution on the same accounts. */
export declare class MustDistributeError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidStakeAta */
export declare class InvalidStakeAtaError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** CannotTransferToSelf */
export declare class CannotTransferToSelfError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** TransferNotSupported: Transfer is not supported on this membership model */
export declare class TransferNotSupportedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** RemoveNotSupported: Remove is not supported on this membership model */
export declare class RemoveNotSupportedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** RemoveSharesMustBeZero: Before you remove a wallet or NFT member please transfer the shares to another member */
export declare class RemoveSharesMustBeZeroError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidCloseAccountDestination: Sending Sol to a SPL token destination will render the sol unusable */
export declare class InvalidCloseAccountDestinationError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export declare function getMplHydraErrorFromCode(code: number, program: Program, cause?: Error): ProgramError | null;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export declare function getMplHydraErrorFromName(name: string, program: Program, cause?: Error): ProgramError | null;
