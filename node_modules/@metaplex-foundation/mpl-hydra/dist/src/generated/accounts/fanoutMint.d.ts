/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type FanoutMint = Account<FanoutMintAccountData>;
export type FanoutMintAccountData = {
    discriminator: Array<number>;
    mint: PublicKey;
    fanout: PublicKey;
    tokenAccount: PublicKey;
    totalInflow: bigint;
    lastSnapshotAmount: bigint;
    bumpSeed: number;
};
export type FanoutMintAccountDataArgs = {
    mint: PublicKey;
    fanout: PublicKey;
    tokenAccount: PublicKey;
    totalInflow: number | bigint;
    lastSnapshotAmount: number | bigint;
    bumpSeed: number;
};
/** @deprecated Use `getFanoutMintAccountDataSerializer()` without any argument instead. */
export declare function getFanoutMintAccountDataSerializer(_context: object): Serializer<FanoutMintAccountDataArgs, FanoutMintAccountData>;
export declare function getFanoutMintAccountDataSerializer(): Serializer<FanoutMintAccountDataArgs, FanoutMintAccountData>;
/** @deprecated Use `deserializeFanoutMint(rawAccount)` without any context instead. */
export declare function deserializeFanoutMint(context: object, rawAccount: RpcAccount): FanoutMint;
export declare function deserializeFanoutMint(rawAccount: RpcAccount): FanoutMint;
export declare function fetchFanoutMint(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<FanoutMint>;
export declare function safeFetchFanoutMint(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<FanoutMint | null>;
export declare function fetchAllFanoutMint(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<FanoutMint[]>;
export declare function safeFetchAllFanoutMint(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<FanoutMint[]>;
export declare function getFanoutMintGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<FanoutMint, {
    discriminator: Array<number>;
    mint: PublicKey;
    fanout: PublicKey;
    tokenAccount: PublicKey;
    totalInflow: number | bigint;
    lastSnapshotAmount: number | bigint;
    bumpSeed: number;
}>;
export declare function getFanoutMintSize(): number;
export declare function findFanoutMintPda(context: Pick<Context, 'eddsa' | 'programs'>, seeds: {
    /** The address of the fanout account */
    fanout: PublicKey;
    /** The address of the mint account */
    mint: PublicKey;
}): Pda;
export declare function fetchFanoutMintFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findFanoutMintPda>[1], options?: RpcGetAccountOptions): Promise<FanoutMint>;
export declare function safeFetchFanoutMintFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findFanoutMintPda>[1], options?: RpcGetAccountOptions): Promise<FanoutMint | null>;
