"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeFetchFanoutMembershipMintVoucherFromSeeds = exports.fetchFanoutMembershipMintVoucherFromSeeds = exports.findFanoutMembershipMintVoucherPda = exports.getFanoutMembershipMintVoucherSize = exports.getFanoutMembershipMintVoucherGpaBuilder = exports.safeFetchAllFanoutMembershipMintVoucher = exports.fetchAllFanoutMembershipMintVoucher = exports.safeFetchFanoutMembershipMintVoucher = exports.fetchFanoutMembershipMintVoucher = exports.deserializeFanoutMembershipMintVoucher = exports.getFanoutMembershipMintVoucherAccountDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
function getFanoutMembershipMintVoucherAccountDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['fanout', (0, serializers_1.publicKey)()],
        ['fanoutMint', (0, serializers_1.publicKey)()],
        ['lastInflow', (0, serializers_1.u64)()],
        ['bumpSeed', (0, serializers_1.u8)()],
    ], { description: 'FanoutMembershipMintVoucherAccountData' }), (value) => ({
        ...value,
        discriminator: [185, 33, 118, 173, 147, 114, 126, 181],
    }));
}
exports.getFanoutMembershipMintVoucherAccountDataSerializer = getFanoutMembershipMintVoucherAccountDataSerializer;
function deserializeFanoutMembershipMintVoucher(context, rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount ?? context, getFanoutMembershipMintVoucherAccountDataSerializer());
}
exports.deserializeFanoutMembershipMintVoucher = deserializeFanoutMembershipMintVoucher;
async function fetchFanoutMembershipMintVoucher(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'FanoutMembershipMintVoucher');
    return deserializeFanoutMembershipMintVoucher(maybeAccount);
}
exports.fetchFanoutMembershipMintVoucher = fetchFanoutMembershipMintVoucher;
async function safeFetchFanoutMembershipMintVoucher(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists
        ? deserializeFanoutMembershipMintVoucher(maybeAccount)
        : null;
}
exports.safeFetchFanoutMembershipMintVoucher = safeFetchFanoutMembershipMintVoucher;
async function fetchAllFanoutMembershipMintVoucher(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'FanoutMembershipMintVoucher');
        return deserializeFanoutMembershipMintVoucher(maybeAccount);
    });
}
exports.fetchAllFanoutMembershipMintVoucher = fetchAllFanoutMembershipMintVoucher;
async function safeFetchAllFanoutMembershipMintVoucher(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeFanoutMembershipMintVoucher(maybeAccount));
}
exports.safeFetchAllFanoutMembershipMintVoucher = safeFetchAllFanoutMembershipMintVoucher;
function getFanoutMembershipMintVoucherGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplHydra', 'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        discriminator: [0, (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        fanout: [8, (0, serializers_1.publicKey)()],
        fanoutMint: [40, (0, serializers_1.publicKey)()],
        lastInflow: [72, (0, serializers_1.u64)()],
        bumpSeed: [80, (0, serializers_1.u8)()],
    })
        .deserializeUsing((account) => deserializeFanoutMembershipMintVoucher(account))
        .whereField('discriminator', [185, 33, 118, 173, 147, 114, 126, 181]);
}
exports.getFanoutMembershipMintVoucherGpaBuilder = getFanoutMembershipMintVoucherGpaBuilder;
function getFanoutMembershipMintVoucherSize() {
    return 105;
}
exports.getFanoutMembershipMintVoucherSize = getFanoutMembershipMintVoucherSize;
function findFanoutMembershipMintVoucherPda(context, seeds) {
    const programId = context.programs.getPublicKey('mplHydra', 'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg');
    return context.eddsa.findPda(programId, [
        (0, serializers_1.string)({ size: 'variable' }).serialize('fanout-membership'),
        (0, serializers_1.publicKey)().serialize(seeds.fanout),
        (0, serializers_1.publicKey)().serialize(seeds.membership),
        (0, serializers_1.publicKey)().serialize(seeds.mint),
    ]);
}
exports.findFanoutMembershipMintVoucherPda = findFanoutMembershipMintVoucherPda;
async function fetchFanoutMembershipMintVoucherFromSeeds(context, seeds, options) {
    return fetchFanoutMembershipMintVoucher(context, findFanoutMembershipMintVoucherPda(context, seeds), options);
}
exports.fetchFanoutMembershipMintVoucherFromSeeds = fetchFanoutMembershipMintVoucherFromSeeds;
async function safeFetchFanoutMembershipMintVoucherFromSeeds(context, seeds, options) {
    return safeFetchFanoutMembershipMintVoucher(context, findFanoutMembershipMintVoucherPda(context, seeds), options);
}
exports.safeFetchFanoutMembershipMintVoucherFromSeeds = safeFetchFanoutMembershipMintVoucherFromSeeds;
//# sourceMappingURL=fanoutMembershipMintVoucher.js.map