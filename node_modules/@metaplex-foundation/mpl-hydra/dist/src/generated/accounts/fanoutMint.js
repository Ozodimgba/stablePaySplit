"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeFetchFanoutMintFromSeeds = exports.fetchFanoutMintFromSeeds = exports.findFanoutMintPda = exports.getFanoutMintSize = exports.getFanoutMintGpaBuilder = exports.safeFetchAllFanoutMint = exports.fetchAllFanoutMint = exports.safeFetchFanoutMint = exports.fetchFanoutMint = exports.deserializeFanoutMint = exports.getFanoutMintAccountDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
function getFanoutMintAccountDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['mint', (0, serializers_1.publicKey)()],
        ['fanout', (0, serializers_1.publicKey)()],
        ['tokenAccount', (0, serializers_1.publicKey)()],
        ['totalInflow', (0, serializers_1.u64)()],
        ['lastSnapshotAmount', (0, serializers_1.u64)()],
        ['bumpSeed', (0, serializers_1.u8)()],
    ], { description: 'FanoutMintAccountData' }), (value) => ({
        ...value,
        discriminator: [50, 164, 42, 108, 90, 201, 250, 216],
    }));
}
exports.getFanoutMintAccountDataSerializer = getFanoutMintAccountDataSerializer;
function deserializeFanoutMint(context, rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount ?? context, getFanoutMintAccountDataSerializer());
}
exports.deserializeFanoutMint = deserializeFanoutMint;
async function fetchFanoutMint(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'FanoutMint');
    return deserializeFanoutMint(maybeAccount);
}
exports.fetchFanoutMint = fetchFanoutMint;
async function safeFetchFanoutMint(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeFanoutMint(maybeAccount) : null;
}
exports.safeFetchFanoutMint = safeFetchFanoutMint;
async function fetchAllFanoutMint(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'FanoutMint');
        return deserializeFanoutMint(maybeAccount);
    });
}
exports.fetchAllFanoutMint = fetchAllFanoutMint;
async function safeFetchAllFanoutMint(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeFanoutMint(maybeAccount));
}
exports.safeFetchAllFanoutMint = safeFetchAllFanoutMint;
function getFanoutMintGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplHydra', 'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        discriminator: [0, (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        mint: [8, (0, serializers_1.publicKey)()],
        fanout: [40, (0, serializers_1.publicKey)()],
        tokenAccount: [72, (0, serializers_1.publicKey)()],
        totalInflow: [104, (0, serializers_1.u64)()],
        lastSnapshotAmount: [112, (0, serializers_1.u64)()],
        bumpSeed: [120, (0, serializers_1.u8)()],
    })
        .deserializeUsing((account) => deserializeFanoutMint(account))
        .whereField('discriminator', [50, 164, 42, 108, 90, 201, 250, 216]);
}
exports.getFanoutMintGpaBuilder = getFanoutMintGpaBuilder;
function getFanoutMintSize() {
    return 200;
}
exports.getFanoutMintSize = getFanoutMintSize;
function findFanoutMintPda(context, seeds) {
    const programId = context.programs.getPublicKey('mplHydra', 'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg');
    return context.eddsa.findPda(programId, [
        (0, serializers_1.string)({ size: 'variable' }).serialize('fanout-config'),
        (0, serializers_1.publicKey)().serialize(seeds.fanout),
        (0, serializers_1.publicKey)().serialize(seeds.mint),
    ]);
}
exports.findFanoutMintPda = findFanoutMintPda;
async function fetchFanoutMintFromSeeds(context, seeds, options) {
    return fetchFanoutMint(context, findFanoutMintPda(context, seeds), options);
}
exports.fetchFanoutMintFromSeeds = fetchFanoutMintFromSeeds;
async function safeFetchFanoutMintFromSeeds(context, seeds, options) {
    return safeFetchFanoutMint(context, findFanoutMintPda(context, seeds), options);
}
exports.safeFetchFanoutMintFromSeeds = safeFetchFanoutMintFromSeeds;
//# sourceMappingURL=fanoutMint.js.map