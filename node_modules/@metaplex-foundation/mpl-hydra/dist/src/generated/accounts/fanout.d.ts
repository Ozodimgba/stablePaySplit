/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Option, OptionOrNullable, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { MembershipModel, MembershipModelArgs } from '../types';
export type Fanout = Account<FanoutAccountData>;
export type FanoutAccountData = {
    discriminator: Array<number>;
    authority: PublicKey;
    name: string;
    accountKey: PublicKey;
    totalShares: bigint;
    totalMembers: bigint;
    totalInflow: bigint;
    lastSnapshotAmount: bigint;
    bumpSeed: number;
    accountOwnerBumpSeed: number;
    totalAvailableShares: bigint;
    membershipModel: MembershipModel;
    membershipMint: Option<PublicKey>;
    totalStakedShares: Option<bigint>;
};
export type FanoutAccountDataArgs = {
    authority: PublicKey;
    name: string;
    accountKey: PublicKey;
    totalShares: number | bigint;
    totalMembers: number | bigint;
    totalInflow: number | bigint;
    lastSnapshotAmount: number | bigint;
    bumpSeed: number;
    accountOwnerBumpSeed: number;
    totalAvailableShares: number | bigint;
    membershipModel: MembershipModelArgs;
    membershipMint: OptionOrNullable<PublicKey>;
    totalStakedShares: OptionOrNullable<number | bigint>;
};
/** @deprecated Use `getFanoutAccountDataSerializer()` without any argument instead. */
export declare function getFanoutAccountDataSerializer(_context: object): Serializer<FanoutAccountDataArgs, FanoutAccountData>;
export declare function getFanoutAccountDataSerializer(): Serializer<FanoutAccountDataArgs, FanoutAccountData>;
/** @deprecated Use `deserializeFanout(rawAccount)` without any context instead. */
export declare function deserializeFanout(context: object, rawAccount: RpcAccount): Fanout;
export declare function deserializeFanout(rawAccount: RpcAccount): Fanout;
export declare function fetchFanout(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<Fanout>;
export declare function safeFetchFanout(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<Fanout | null>;
export declare function fetchAllFanout(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<Fanout[]>;
export declare function safeFetchAllFanout(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<Fanout[]>;
export declare function getFanoutGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<Fanout, {
    discriminator: Array<number>;
    authority: PublicKey;
    name: string;
    accountKey: PublicKey;
    totalShares: number | bigint;
    totalMembers: number | bigint;
    totalInflow: number | bigint;
    lastSnapshotAmount: number | bigint;
    bumpSeed: number;
    accountOwnerBumpSeed: number;
    totalAvailableShares: number | bigint;
    membershipModel: MembershipModelArgs;
    membershipMint: OptionOrNullable<PublicKey>;
    totalStakedShares: OptionOrNullable<number | bigint>;
}>;
export declare function getFanoutSize(): number;
export declare function findFanoutPda(context: Pick<Context, 'eddsa' | 'programs'>, seeds: {
    /** The name of the fanout account */
    name: string;
}): Pda;
export declare function fetchFanoutFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findFanoutPda>[1], options?: RpcGetAccountOptions): Promise<Fanout>;
export declare function safeFetchFanoutFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findFanoutPda>[1], options?: RpcGetAccountOptions): Promise<Fanout | null>;
