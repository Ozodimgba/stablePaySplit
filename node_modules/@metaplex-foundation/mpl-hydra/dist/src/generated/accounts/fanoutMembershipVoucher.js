"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeFetchFanoutMembershipVoucherFromSeeds = exports.fetchFanoutMembershipVoucherFromSeeds = exports.findFanoutMembershipVoucherPda = exports.getFanoutMembershipVoucherSize = exports.getFanoutMembershipVoucherGpaBuilder = exports.safeFetchAllFanoutMembershipVoucher = exports.fetchAllFanoutMembershipVoucher = exports.safeFetchFanoutMembershipVoucher = exports.fetchFanoutMembershipVoucher = exports.deserializeFanoutMembershipVoucher = exports.getFanoutMembershipVoucherAccountDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
function getFanoutMembershipVoucherAccountDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['fanout', (0, serializers_1.publicKey)()],
        ['totalInflow', (0, serializers_1.u64)()],
        ['lastInflow', (0, serializers_1.u64)()],
        ['bumpSeed', (0, serializers_1.u8)()],
        ['membershipKey', (0, serializers_1.publicKey)()],
        ['shares', (0, serializers_1.u64)()],
    ], { description: 'FanoutMembershipVoucherAccountData' }), (value) => ({
        ...value,
        discriminator: [185, 62, 74, 60, 105, 158, 178, 125],
    }));
}
exports.getFanoutMembershipVoucherAccountDataSerializer = getFanoutMembershipVoucherAccountDataSerializer;
function deserializeFanoutMembershipVoucher(context, rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount ?? context, getFanoutMembershipVoucherAccountDataSerializer());
}
exports.deserializeFanoutMembershipVoucher = deserializeFanoutMembershipVoucher;
async function fetchFanoutMembershipVoucher(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'FanoutMembershipVoucher');
    return deserializeFanoutMembershipVoucher(maybeAccount);
}
exports.fetchFanoutMembershipVoucher = fetchFanoutMembershipVoucher;
async function safeFetchFanoutMembershipVoucher(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists
        ? deserializeFanoutMembershipVoucher(maybeAccount)
        : null;
}
exports.safeFetchFanoutMembershipVoucher = safeFetchFanoutMembershipVoucher;
async function fetchAllFanoutMembershipVoucher(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'FanoutMembershipVoucher');
        return deserializeFanoutMembershipVoucher(maybeAccount);
    });
}
exports.fetchAllFanoutMembershipVoucher = fetchAllFanoutMembershipVoucher;
async function safeFetchAllFanoutMembershipVoucher(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeFanoutMembershipVoucher(maybeAccount));
}
exports.safeFetchAllFanoutMembershipVoucher = safeFetchAllFanoutMembershipVoucher;
function getFanoutMembershipVoucherGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplHydra', 'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        discriminator: [0, (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        fanout: [8, (0, serializers_1.publicKey)()],
        totalInflow: [40, (0, serializers_1.u64)()],
        lastInflow: [48, (0, serializers_1.u64)()],
        bumpSeed: [56, (0, serializers_1.u8)()],
        membershipKey: [57, (0, serializers_1.publicKey)()],
        shares: [89, (0, serializers_1.u64)()],
    })
        .deserializeUsing((account) => deserializeFanoutMembershipVoucher(account))
        .whereField('discriminator', [185, 62, 74, 60, 105, 158, 178, 125]);
}
exports.getFanoutMembershipVoucherGpaBuilder = getFanoutMembershipVoucherGpaBuilder;
function getFanoutMembershipVoucherSize() {
    return 153;
}
exports.getFanoutMembershipVoucherSize = getFanoutMembershipVoucherSize;
function findFanoutMembershipVoucherPda(context, seeds) {
    const programId = context.programs.getPublicKey('mplHydra', 'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg');
    return context.eddsa.findPda(programId, [
        (0, serializers_1.string)({ size: 'variable' }).serialize('fanout-membership'),
        (0, serializers_1.publicKey)().serialize(seeds.fanout),
        (0, serializers_1.publicKey)().serialize(seeds.member),
    ]);
}
exports.findFanoutMembershipVoucherPda = findFanoutMembershipVoucherPda;
async function fetchFanoutMembershipVoucherFromSeeds(context, seeds, options) {
    return fetchFanoutMembershipVoucher(context, findFanoutMembershipVoucherPda(context, seeds), options);
}
exports.fetchFanoutMembershipVoucherFromSeeds = fetchFanoutMembershipVoucherFromSeeds;
async function safeFetchFanoutMembershipVoucherFromSeeds(context, seeds, options) {
    return safeFetchFanoutMembershipVoucher(context, findFanoutMembershipVoucherPda(context, seeds), options);
}
exports.safeFetchFanoutMembershipVoucherFromSeeds = safeFetchFanoutMembershipVoucherFromSeeds;
//# sourceMappingURL=fanoutMembershipVoucher.js.map